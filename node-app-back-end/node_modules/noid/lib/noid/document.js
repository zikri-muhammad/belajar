(function() {
  var Document, Noid, ObjectID, util, _;
  var __hasProp = Object.prototype.hasOwnProperty;
  util = require('util');
  _ = require('underscore')._;
  ObjectID = require('mongodb/bson/bson').ObjectID;
  Noid = require('noid').Noid;
  Document = function() {
    function Document(attributes) {
      var _ref;
      this.attributes = attributes;
      (_ref = this.attributes) != null ? _ref : this.attributes = {};
    }
    Document.prototype["delete"] = function(callback) {
      var attributes, self;
      self = this;
      attributes = this.attributes;
      return this.constructor._ensureCollectionIsSetup(function(error, collection) {
        if (error != null) {
          callback(error, null);
          return;
        }
        return collection.remove({
          _id: attributes._id
        }, function(error) {
          if (error != null) {
            callback(error, null);
            return;
          }
          return callback(null, self);
        });
      });
    };
    Document.prototype.id = function() {
      if (this.isNewRecord()) {
        return null;
      } else {
        return this.attributes._id.toHexString();
      }
    };
    Document.prototype.isNewRecord = function() {
      if (this.attributes._id != null) {
        return false;
      } else {
        return true;
      }
    };
    Document.prototype.save = function(callback) {
      var attributes, self;
      self = this;
      attributes = this.attributes;
      if (this.isNewRecord()) {
        return this.constructor._ensureCollectionIsSetup(function(error, collection) {
          if (error != null) {
            callback('Error inserting document: ' + error, self);
            return;
          }
          return collection.insert(attributes, function(error) {
            if (error != null) {
              callback('Error inserting document: ' + error, self);
              return;
            }
            return callback(error, self);
          });
        });
      } else {
        return this.constructor._ensureCollectionIsSetup(function(error, collection) {
          return collection.update({
            _id: attributes._id
          }, attributes, function(error) {
            return callback(error, self);
          });
        });
      }
    };
    Document.prototype.updateAttributes = function(attributes, callback) {
      var key, value;
      for (key in attributes) {
        if (!__hasProp.call(attributes, key)) continue;
        value = attributes[key];
        this.attributes[key] = value;
      }
      return this.save(callback);
    };
    Document.field = function(name) {
      return this.prototype[name] = function(val) {
        if (arguments.length > 0) {
          return this.attributes[name] = val;
        } else {
          return this.attributes[name];
        }
      };
    };
    Document.storeIn = function(collection_name) {
      return this.prototype._storeIn = collection_name;
    };
    Document._ensureCollectionIsSetup = function(callback) {
      var collectionName, self, _ref;
      self = this;
      collectionName = (_ref = this.prototype._storeIn) != null ? _ref : self.name.toString();
      return Noid.db(function(error, db) {
        if (error != null) {
          callback('Error establishing database connection: ' + error, null);
          return;
        }
        return db.createCollection(collectionName, function(error) {
          if (error != null) {
            callback('Error creating collection: ' + error, null);
            return;
          }
          return db.collection(collectionName, function(error, collection) {
            if (error != null) {
              callback('Error using collection: ' + error, null);
              return;
            }
            return callback(error, collection);
          });
        });
      });
    };
    Document.all = function(callback) {
      var self;
      self = this;
      return this._ensureCollectionIsSetup(function(error, collection) {
        if (error != null) {
          callback(error, null);
          return;
        }
        return collection.find(function(error, cursor) {
          if (error != null) {
            callback(error, null);
            return;
          }
          return cursor.toArray(function(error, documents) {
            var instances;
            instances = _.map(documents, function(document) {
              return new self(document);
            });
            return callback(null, instances);
          });
        });
      });
    };
    Document.create = function(attributes, callback) {
      var document;
      document = new this(attributes);
      return document.save(function(error, doc) {
        return callback(error, doc);
      });
    };
    Document.deleteAll = function(callback) {
      return this._ensureCollectionIsSetup(function(error, collection) {
        if (error != null) {
          callback(error);
          return;
        }
        return collection.remove({}, function(error) {
          if (error != null) {
            callback(error);
            return;
          }
          return callback(null);
        });
      });
    };
    Document.find = function(id, callback) {
      var self;
      self = this;
      return this._ensureCollectionIsSetup(function(error, collection) {
        if (error != null) {
          callback(error, null);
          return;
        }
        return collection.findOne({
          "_id": ObjectID.createFromHexString(id)
        }, function(error, document) {
          if (error != null) {
            callback(error, null);
            return;
          }
          if (document != null) {
            return callback(null, new self(document));
          } else {
            return callback('Document not found', null);
          }
        });
      });
    };
    Document.findAll = function(options, callback) {
      var self;
      self = this;
      return this._ensureCollectionIsSetup(function(error, collection) {
        if (error != null) {
          callback(error, null);
          return;
        }
        return collection.find(options.conditions, function(error, cursor) {
          if (error != null) {
            callback(error, null);
            return;
          }
          return cursor.toArray(function(error, documents) {
            var instances;
            instances = _.map(documents, function(document) {
              return new self(document);
            });
            return callback(null, instances);
          });
        });
      });
    };
    Document.findFirst = function(options, callback) {
      var self;
      self = this;
      return this._ensureCollectionIsSetup(function(error, collection) {
        if (error != null) {
          callback(error, null);
          return;
        }
        return collection.findOne(options.conditions, function(error, document) {
          if (error != null) {
            callback(error, null);
            return;
          }
          if (document != null) {
            return callback(null, new self(document));
          } else {
            return callback('Document not found', null);
          }
        });
      });
    };
    return Document;
  }();
  exports.Document = Document;
}).call(this);
